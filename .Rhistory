library(devtools)
setwd("~/projects/TGIA_Spatial/Visium/visiumHDResDeconv")
devtools::document()
devtools::check()
devtools::install_local(".")
library(visiumHDResDeconv)
barcodes_to_pseudo_coordinates("s_008um_00010_00020-1")
devtools::document()
devtools::install_local(".")
devtools::install_local(".", force = T)
library(visiumHDResDeconv)
barcodes_to_pseudo_coordinates("s_008um_00010_00020-1")
usethis::use_github_action_check_standard()
usethis::use_github_action(check_standard = TRUE)
usethis::use_github_action(check-standard = TRUE)
usethis::use_github_action("check-standard")
sce <- DropletUtils::read10xCounts("/mnt/Export/TS250102003/ALwax_64um/outs/binned_outputs/square_064um/filtered_feature_bc_matrix")
img <- readImgData("/mnt/Export/TS250102003/ALwax_64um/outs/binned_outputs/square_064um/spatial",
sample_id = "ALwax")
library(Seurat)
library(ggplot2)
library(patchwork)
library(dplyr)
library(spacexr)
library(Banksy)
library(SpaNorm)
library(SpatialExperiment)
library(readr)
library(SpotSweeper)
library(ggspavis)
library(escheR)
library(jsonlite)
options(future.globals.maxSize = 1e9)
sce <- DropletUtils::read10xCounts("/mnt/Export/TS250102003/ALwax_64um/outs/binned_outputs/square_064um/filtered_feature_bc_matrix")
img <- readImgData("/mnt/Export/TS250102003/ALwax_64um/outs/binned_outputs/square_064um/spatial",
sample_id = "ALwax")
tissue_pos <- arrow::read_parquet("/mnt/Export/TS250102003/ALwax_64um/outs/binned_outputs/square_064um/spatial/tissue_positions.parquet") %>% filter(in_tissue == 1)
# tissue_pos$nCount_Spatial <- seu_ALwax$nCount_Spatial[tissue_pos$barcode]
# tissue_pos$nFeature_Spatial <- seu_ALwax$nFeature_Spatial[tissue_pos$barcode]
rd <- S4Vectors::DataFrame(symbol = rowData(sce)$Symbol)
rownames(sce) <- rowData(sce)$Symbol
spe_ALwax <- SpatialExperiment(assays = list(counts = assay(sce)),
rowData = rd,
colData = DataFrame(tissue_pos),
spatialCoordsNames = c("pxl_col_in_fullres", "pxl_row_in_fullres"),
imgData = img,
sample_id = "ALwax")
# identifying the mitochondrial transcripts
is.mito <- rownames(spe_ALwax)[grepl("^mt-|^MT-", rownames(spe_ALwax))]
# calculating QC metrics for each spot using scuttle
spe_ALwax <- scuttle::addPerCellQCMetrics(spe_ALwax, subsets = list(Mito = is.mito))
keep <- colData(spe_ALwax)$sum > 0
spe_ALwax <- spe_ALwax[, keep]
par(mfrow = c(1, 4))
hist(colData(spe_ALwax)$sum, xlab = "sum", main = "UMIs per spot")
hist(colData(spe_ALwax)$detected, xlab = "detected", main = "Genes per spot")
hist(colData(spe_ALwax)$subsets_Mito_percent, xlab = "pct mito", main = "Percent mito UMIs")
qc_lib_size <- colData(spe_ALwax)$sum < 50
spe_ALwax$qc_lib_size <- qc_lib_size
spe_ALwax$global_outliers <- as.logical(qc_lib_size)
Barcodes2PseudoCoordinates <- function(barcode_list){
df <- data.frame(barcodes = barcode_list)
df <- df %>% separate(barcodes,
into = c("prefix1", "prefix2", "rows", "cols"),
sep = "_",
remove = FALSE) %>%
select(-prefix1, -prefix2)
df$cols <- gsub("-1", "", df$cols)
return(df)
}
bad_spots <- Barcodes2PseudoCoordinates(colData(spe_ALwax)$barcode[spe_ALwax$global_outliers])
library(tidyr)
bad_spots <- Barcodes2PseudoCoordinates(colData(spe_ALwax)$barcode[spe_ALwax$global_outliers])
bad_spots
pwd
CoordinateBasedDeconvolved <- function(barcode_list,
parquet_low_res,
parquet_high_res,
json_low_res,
low_res,
high_res){
if (low_res < high_res){
stop("low_res must be larger than high_res.")
}
if (low_res %% high_res != 0){
stop("low_res must be a multiple of high_res.")
}
data <- fromJSON(json_low_res)
microns_per_pixel <- data$microns_per_pixel
parquet_low_res <- arrow::read_parquet(parquet_low_res) %>% filter(in_tissue == 1)
parquet_high_res <- arrow::read_parquet(parquet_high_res) %>% filter(in_tissue == 1)
discard_barcodes <- character()
for (br in barcode_list){
ctr  <- parquet_low_res %>% filter(barcode == br)
half_side_px <- (low_res / 2) / 4.649492204882606 # microns_per_pixel in JSON
rmin <- ctr$pxl_row_in_fullres - half_side_px
rmax <- ctr$pxl_row_in_fullres + half_side_px
cmin <- ctr$pxl_col_in_fullres - half_side_px
cmax <- ctr$pxl_col_in_fullres + half_side_px
child <- parquet_high_res %>%
filter(pxl_row_in_fullres >= rmin,
pxl_row_in_fullres <= rmax,
pxl_col_in_fullres >= cmin,
pxl_col_in_fullres <= cmax) %>%
pull(barcode)
discard_barcodes <- c(discard_barcodes, child)
}
return(unique(discard_barcodes))
}
BarcodeBasedDeconvolved <- function(barcode_list, low_res, high_res){
if (low_res < high_res){
stop("low_res must be larger than high_res.")
}
if (low_res %% high_res != 0){
stop("low_res must be a multiple of high_res.")
}
factor <- low_res/high_res
prefix <- sprintf("%03dum", high_res)
discard_barcodes <- character()
for (bc in barcode_list){
bc_untail <- gsub("-1", "", bc)
row_low <- as.integer(unlist(str_split(bc_untail, "_", simplify = TRUE))[3])
col_low <- as.integer(unlist(str_split(bc_untail, "_", simplify = TRUE))[4])
rows_high <- seq(row_low*factor,
row_low*factor + factor - 1)
cols_high <- seq(col_low*factor,
col_low*factor + factor - 1)
for (r in rows_high) {
for (c in cols_high) {
# sprintf 補滿 5 位数字
discard_barcodes <- c(discard_barcodes,
paste0("s_",
prefix, "_",
sprintf("%05d", r), "_",
sprintf("%05d", c),
"-1")
)
}
}
}
return(unique(discard_barcodes))
}
m1 <- BarcodeBasedDeconvolved(bad_spots$barcodes, low_res = 64, high_res = 8)
library(stringr)
m1 <- BarcodeBasedDeconvolved(bad_spots$barcodes, low_res = 64, high_res = 8)
m2 <- CoordinateBasedDeconvolved(bad_spots$barcodes,
parquet_low_res = "/mnt/Export/TS250102003/ALwax_64um/outs/binned_outputs/square_064um/spatial/tissue_positions.parquet",
parquet_high_res = "/mnt/Export/TS250102003/ALwax/outs/binned_outputs/square_008um/spatial/tissue_positions.parquet",
json_low_res = "/mnt/Export/TS250102003/ALwax_64um/outs/binned_outputs/square_064um/spatial/scalefactors_json.json",
low_res = 64,
high_res = 8)
myplotQC <- function(spe,
sample_id = "sample_id",
sample = unique(colData(spe)[[sample_id]])[1],
metric = "detected",
outliers = NULL,
point_size = 2, colors = c("white", "black"), stroke = 1) {
spe_sub <- spe[, colData(spe)[[sample_id]] == sample]
p <- escheR::make_escheR(spe_sub) |>
add_fill(var = metric, point_size = point_size)
df <- as.data.frame(colData(spe_sub))
coords <- spatialCoords(spe_sub)
df$x <- coords[, 1]
df$y <- coords[, 2]
df$metric_val <- df[[metric]]
r <- imgRaster(spe_sub)
img_mat <- as.raster(r)
xmin <- min(df$x)
xmax <- max(df$x)
ymin <- min(df$y)
ymax <- max(df$y)
p <- p +
annotation_raster(img_mat, xmin = xmin, xmax = xmax,
ymin = ymin, ymax = ymax) +
coord_equal()
p <- p +
geom_point(data = df, aes(x = x, y = y, fill = metric_val),
shape = 21, size = point_size, stroke = 0, color = NA)
if (!is.null(outliers)) {
out_vec <- df[[outliers]]
if (is.factor(out_vec) || is.character(out_vec)) {
out_factor <- if (is.factor(out_vec)) out_vec else factor(out_vec)
idx <- which(!is.na(out_factor))
if (length(idx) > 0) {
df_out <- df[idx, , drop = FALSE]
df_out$outlier_group <- droplevels(out_factor[idx])
p <- p +
geom_point(data = df_out,
aes(x = x, y = y, fill = metric_val, color = outlier_group),
shape = 21, size = point_size, stroke = stroke) +
scale_color_discrete(name = outliers) +
guides(color = guide_legend(override.aes = list(fill = NA)))
}
} else if (is.logical(out_vec) || all(out_vec %in% c(0, 1, NA))) {
idx <- which(isTRUE(out_vec) | (out_vec %in% TRUE))
if (length(idx) > 0) {
df_out <- df[idx, , drop = FALSE]
p <- p +
geom_point(data = df_out,
aes(x = x, y = y),
shape = 21, size = point_size, stroke = stroke, color = "red")
}
}
}
if (length(colors) == 2) {
p <- p + scale_fill_gradient(low = colors[1], high = colors[2], name = metric)
} else {
p <- p + scale_fill_gradientn(colors = colors, name = metric)
}
return(p)
}
CompareDeconvolvedMethods <- function(m1, m2, spe_high_res){
p_venn <- ggvenn(list(barcode_based = m1,
coordinate_based = m2))
s1 <- setdiff(m2, m1)
s2 <- setdiff(m1, m2)
s3 <- intersect(m1, m2)
# plotting spots
spe_high_res$highlight_spots <- NA
spe_high_res$highlight_spots[which(colData(spe_high_res)$barcode %in% s1)] <- "barcode-based excluded"
spe_high_res$highlight_spots[which(colData(spe_high_res)$barcode %in% s2)] <- "coordinate-based excluded"
spe_high_res$highlight_spots[which(colData(spe_high_res)$barcode %in% s3)] <- "both"
p_QC <-
myplotQC(spe_high_res,
metric = "sum",
outliers = "highlight_spots",
point_size = 1,
stroke = 0.8) +
ggtitle("Compare deconvolved results from both methods")
print(p_venn)
print(p_QC)
}
#####
EstimateDeconvolvedScores <- function(df,
parquet_low_res,
parquet_high_res,
json_low_res,
low_res,
high_res){
df$scores <- NA_real_
barcodes <- df[["barcodes"]]
for (br in barcodes){
m1 <- BarcodeBasedDeconvolved(br, low_res = low_res, high_res = high_res)
m2 <- CoordinateBasedDeconvolved(br,
parquet_low_res = parquet_low_res,
parquet_high_res = parquet_high_res,
json_low_res = json_low_res,
low_res = low_res,
high_res = high_res)
score <- length(intersect(m1, m2)) / length(union(m1,m2))
df$scores[df$barcodes == br] <- score
}
p_density <- ggplot(df, aes(x = scores)) +
geom_density(fill = "lightblue", alpha = 0.6, size = 1) +
theme_minimal(base_size = 14) +
labs(title = "Distribution",
x     = "Scores",
y     = "Density")
low_score_df <- df %>% dplyr::select(barcodes, scores) %>% dplyr::slice_min(order_by = scores, n = 10)
ps <- vector("list", length = nrow(low_score_df))
for (i in seq_len(nrow(low_score_df))){
bc <- low_score_df$barcodes[i]
sc <- low_score_df$scores[i]
m1 <- BarcodeBasedDeconvolved(bc, low_res = low_res, high_res = high_res)
m2 <- CoordinateBasedDeconvolved(bc,
parquet_low_res = parquet_low_res,
parquet_high_res = parquet_high_res,
json_low_res = json_low_res,
low_res = low_res,
high_res = high_res)
m1_df <- Barcodes2PseudoCoordinates(m1)
if (nrow(m1_df) > 0){
m1_df$labels <- "m1"
m1_df$rows <- as.integer(m1_df$rows)
m1_df$cols <- as.integer(m1_df$cols)
}
m2_df <- Barcodes2PseudoCoordinates(m2)
if (nrow(m2_df) > 0){
m2_df$labels <- "m2"
m2_df$rows <- as.integer(m2_df$rows)
m2_df$cols <- as.integer(m2_df$cols)
title_text = paste0(bc, "  (score=", round(sc, 3), ")")
} else {
title_text = paste0(bc, "  (score=", round(sc, 3), ") \n Coordinate-Based method found 0 spots.")
}
df_all <- rbind(m1_df, m2_df)
p_scatter <- ggplot(df_all, aes(x = cols, y = rows, color = labels)) +
geom_point(alpha = 0.6, size = 2) +
theme_minimal() +
labs(title = title_text,
x     = "Column",
y     = "Row") +
scale_color_manual(values = c("m1" = "tomato", "m2" = "steelblue"))
ps[[i]] <- p_scatter
}
print(p_density)
for (p in ps) {
print(p)
}
return(df)
}
bad_spots <- EstimateDeconvolvedScores(bad_spots,
parquet_low_res = "/mnt/Export/TS250102003/ALwax_64um/outs/binned_outputs/square_064um/spatial/tissue_positions.parquet",
parquet_high_res = "/mnt/Export/TS250102003/ALwax/outs/binned_outputs/square_008um/spatial/tissue_positions.parquet",
json_low_res = "/mnt/Export/TS250102003/ALwax_64um/outs/binned_outputs/square_064um/spatial/scalefactors_json.json",
low_res = 64,
high_res = 8)
sce <- DropletUtils::read10xCounts("/mnt/Export/TS250102003/ALwax/outs/binned_outputs/square_008um/filtered_feature_bc_matrix")
img <- readImgData("/mnt/Export/TS250102003/ALwax/outs/binned_outputs/square_008um/spatial",
sample_id = "ALwax")
tissue_pos <- arrow::read_parquet("/mnt/Export/TS250102003/ALwax/outs/binned_outputs/square_008um/spatial/tissue_positions.parquet") %>% filter(in_tissue == 1)
rd <- S4Vectors::DataFrame(symbol = rowData(sce)$Symbol)
rownames(sce) <- rowData(sce)$Symbol
spe_ALwax_8um <- SpatialExperiment(assays = list(counts = assay(sce)),
rowData = rd,
colData = DataFrame(tissue_pos),
spatialCoordsNames = c("pxl_col_in_fullres",
"pxl_row_in_fullres"),
imgData = img,
sample_id = "ALwax")
# identifying the mitochondrial transcripts
is.mito <- rownames(spe_ALwax_8um)[grepl("^mt-|^MT-", rownames(spe_ALwax_8um))]
# calculating QC metrics for each spot using scuttle
spe_ALwax_8um <- scuttle::addPerCellQCMetrics(spe_ALwax_8um, subsets = list(Mito = is.mito))
keep <- colData(spe_ALwax_8um)$sum > 0
spe_ALwax_8um <- spe_ALwax_8um[, keep]
# Usage
CompareDeconvolvedMethods(m1 = m1, m2 = m2, spe_high_res = spe_ALwax_8um)
library(ggvenn)
CompareDeconvolvedMethods(m1 = m1, m2 = m2, spe_high_res = spe_ALwax_8um)
CompareDeconvolvedMethods(m1 = m1, m2 = m2, spe_high_res = spe_ALwax_8um)
CompareDeconvolvedMethods(m1 = m1, m2 = m2, spe_high_res = spe_ALwax_8um)
gc()
